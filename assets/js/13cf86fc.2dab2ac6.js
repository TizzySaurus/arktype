"use strict";(self.webpackChunkredo_dev=self.webpackChunkredo_dev||[]).push([[616],{8044:(e,n,r)=>{r.d(n,{Zo:()=>l,kt:()=>m});var t=r(9231);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=t.createContext({}),c=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},l=function(e){var n=c(e.components);return t.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return r?t.createElement(f,i(i({ref:n},l),{},{components:r})):t.createElement(f,i({ref:n},l))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4705:(e,n,r)=>{r.d(n,{g:()=>v});var t=r(5712),o=r(9231);const a={user:'import { define } from "./names"\n\nexport const userDef = define.user({\n    name: "string",\n    bestFriend: "user?",\n    groups: "group[]"\n})\n',group:'import { define } from "./names"\n\nexport const groupDef = define.group({\n    title: "string",\n    members: "user[]"\n})\n',names:'import { declare } from "@re-/type"\n\n// Declare the models you will define\nexport const { define, compile } = declare("user", "group")\n'},i={type:"import { type } from \"@re-/type\"\n\n// Define a type...\nexport const user = type({\n    name: \"string\",\n    browser: {\n        kind: \"'chrome'|'firefox'|'safari'\",\n        version: \"number?\"\n    }\n})\n\n// Infer it...\nexport type User = typeof user.infer\n\nexport const fetchUser = () => ({\n    name: \"Dan Abramov\",\n    browser: {\n        kind: \"Internet Explorer\" // R.I.P.\n    }\n})\n\n// Types can validate your data anytime, anywhere, with the same clarity and precision you expect from TypeScript.\nexport const { errors, data } = user.check(fetchUser())\n\nif (errors) {\n    // \"At path browser, 'Internet Explorer' is not assignable to any of 'chrome'|'firefox'|'other'|null.\"\n    console.log(errors.summary)\n}\n",space:'import { space } from "@re-/type"\n\n// Spaces are collections of types that can reference each other.\nexport const types = space({\n    package: {\n        name: "string",\n        dependencies: "package[]",\n        contributors: "contributor[]"\n    },\n    contributor: {\n        // Subtypes like \'email\' are inferred like \'string\' but provide additional validation at runtime.\n        email: "email",\n        packages: "package[]?"\n    }\n})\n\n// Cyclic types are inferred to arbitrary depth...\nexport type Package = typeof types.package.infer\n\n// And can validate cyclic data.\nexport const readPackageData = () => ({\n    name: "@re-/type",\n    dependencies: [{ name: "@re-/tools", dependencies: [] }],\n    contributors: [{ email: "david@redodev" }]\n})\n\n// `Encountered errors at the following paths:\n//   dependencies/0/contributors: Required value of type contributor[] was missing.\n//   contributors/0/email: "david@redodev" is not assignable to email.`\nexport const { errors } = types.package.check(readPackageData())\n',constraints:'import { type } from "@re-/type"\n\nexport const employee = type({\n    // Not a fan of regex? Don\'t worry, \'email\' is a builtin type.\n    email: `/[a-z]*@redo.dev/`,\n    about: {\n        // Single or double bound numeric types\n        age: "18<=integer<125",\n        // Or string lengths\n        bio: "string<=80"\n    }\n})\n\n// Subtypes like \'email\' and \'integer\' become \'string\' and \'number\'\nexport type Employee = typeof employee.infer\n\nexport const queryEmployee = () => ({\n    email: "david@redo.biz",\n    about: {\n        age: 17,\n        bio: "I am very interesting.".repeat(5)\n    }\n})\n\n// The error messages are so nice you might be tempted to break your code more often ;)\nexport const { errors } = employee.check(queryEmployee())\n\n// Encountered errors at the following paths:\n//   email: \'david@redo.biz\' does not match expression /[a-z]*@redo.dev/.\n//   about/age: 17 must be greater than or equal to 18.\n//   about/bio: "I am very interesting.I am very interesting.I am ..." must be less than or equal to 80 characters (was 110).\nconsole.log(errors?.summary ?? "Flawless. Obviously.")\n',declaration:'import { groupDef } from "./group"\nimport { compile } from "./names"\nimport { userDef } from "./user"\n\n// Creates your space (or tells you which definition you forgot to include)\nexport const types = compile({ ...userDef, ...groupDef })\n\n// Mouse over "Group" to see the inferred type...\nexport type Group = typeof types.group.infer\n\nexport const getGroupsForCurrentUser = () => ({\n    title: "Type Enjoyers",\n    members: [\n        {\n            name: "Devin Aldai",\n            grapes: []\n        }\n    ]\n})\n\n// Try changing the definitions in "group.ts"/"user.ts" or the data in "getGroupsForCurrentUser"\nexport const { errors } = types.group.check(getGroupsForCurrentUser())\n'},s={"index.html":'<head>\n    <link href="http://fonts.cdnfonts.com/css/cascadia-code" rel="stylesheet" />\n</head>\n<div id="demo">\n    <div id="input">\n        <div class="section">\n            <h3>Definition</h3>\n            <div class="card">\n                <pre><code id="definition"></code></pre>\n            </div>\n        </div>\n        <div class="section">\n            <h3>Data</h3>\n            <div class="card">\n                <pre id="data"></pre>\n            </div>\n        </div>\n    </div>\n    <div class="section">\n        <h3>Result</h3>\n        <div class="card">\n            <p id="result"></p>\n        </div>\n    </div>\n</div>\n',"demo.css":'body {\n    font-family: "Cascadia Code", sans-serif;\n    background-color: hsl(220 18% 10%);\n}\n\n#demo {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    margin: -8px;\n    padding: 8px;\n}\n\n#input {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    gap: 8px;\n}\n\n.section {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    gap: 8px;\n}\n\n.card {\n    padding: 8px;\n    background-color: rgb(18, 18, 18);\n    color: rgb(255, 255, 255);\n    /* transition: box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms; */\n    border-radius: 4px;\n    box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 1px -1px,\n        rgba(0, 0, 0, 0.14) 0px 1px 1px 0px, rgba(0, 0, 0, 0.12) 0px 1px 3px 0px;\n    background-image: linear-gradient(\n        rgba(255, 255, 255, 0.05),\n        rgba(255, 255, 255, 0.05)\n    );\n    height: 100%;\n}\n\np {\n    white-space: pre-wrap;\n}\n\npre {\n    white-space: pre-wrap;\n}\n\nh3 {\n    margin: 0px;\n    color: #fff;\n}\n\n.key {\n    color: #264bcf;\n}\n.val {\n    color: #ffc40c;\n}\n',"populateDemo.ts":'import "./demo.css";\nexport const populateDemo = ({ data, definition, error }) => {\n  const defElement = document.querySelector("#definition");\n  defElement.textContent = JSON.stringify(definition, null, 2);\n  defElement.innerHTML = recolor(defElement.innerHTML);\n  const dataElement = document.querySelector("#data");\n  dataElement.textContent = JSON.stringify(data, null, 2);\n  dataElement.innerHTML = recolor(dataElement.innerHTML);\n  document.querySelector("#result").textContent = error != null ? error : "Looks good!";\n};\nfunction recolor(input) {\n  const lines = input.split("\\n");\n  const fixedInput = [];\n  for (const line of lines) {\n    if (line.includes(":")) {\n      const parts = line.split(":");\n      fixedInput.push(`${buildKey(parts[0])}: ${buildVal(parts[1])}`);\n    } else {\n      fixedInput.push(line);\n    }\n  }\n  return fixedInput.join("\\n");\n}\nfunction buildKey(key) {\n  return `<span class=\'key\'>${key}</span>`;\n}\nfunction buildVal(val) {\n  const formatted = val.trim();\n  if (formatted.at(-1) === ",") {\n    return `<span class=\'val\'>${formatted.replace(",", "")}</span>,`;\n  } else if (formatted.at(-1) === "{") {\n    return "{";\n  }\n  return `<span class=\'val\'>${formatted}</span>`;\n}\n',"tsconfig.json":JSON.stringify({compilerOptions:{module:"esnext",target:"esnext",strict:!0}},null,4)};var p=r(9672);const c="re-type-demo",l=e=>{const n=d[e];return`import {populateDemo} from "./populateDemo"\n${n[0]}\npopulateDemo(${n[1]})`},d={type:['import { user, fetchUser, errors } from "./type"',"{ definition: user.definition, data: fetchUser(), error: errors.summary }"],space:['import { types, readPackageData, errors } from "./space"',"{ definition: types.$root.dictionary, data: readPackageData(), error: errors.summary }"],constraints:['import { employee, queryEmployee, errors } from "./constraints"',"{ definition: employee.definition, data: queryEmployee(), error: errors.summary }"],declaration:['import { types, getGroupsForCurrentUser, errors } from "./declaration"',"{ definition: types.$root.dictionary, data: getGroupsForCurrentUser(), error: errors.summary }"]};var u=Object.defineProperty,m=Object.getOwnPropertySymbols,f=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable,b=(e,n,r)=>n in e?u(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,g=(e,n)=>{for(var r in n||(n={}))f.call(n,r)&&b(e,r,n[r]);if(m)for(var r of m(n))y.call(n,r)&&b(e,r,n[r]);return e};const h=e=>{const n={};for(const r of e)n[`${r}.ts`]=a[r];return n},v=({embedId:e,addonFiles:n})=>((0,o.useEffect)((()=>{(({files:e,title:n,description:r,embedId:t})=>{p.Z.embedProject(c,{files:e,title:n,description:r,template:"typescript",dependencies:{"@re-/type":"2.0.9-alpha","@re-/tools":"2.2.3"},settings:{compile:{clearConsole:!1}}},{height:"100%",openFile:`${t}.ts`})})({files:g(g({[`${e}.ts`]:i[e],"index.ts":l(e)},s),h(null!=n?n:[])),title:`${e}`,description:`Demo for ${e}`,embedId:e})}),[]),o.createElement(t.Z,{style:{width:"100%",height:"660px",border:0,marginLeft:-8,marginRight:-8,padding:16,overflow:"hidden",borderRadius:"8px"}},o.createElement("div",{id:c})))},4403:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>b,contentTitle:()=>f,default:()=>v,frontMatter:()=>m,metadata:()=>y,toc:()=>g});var t=r(8044),o=r(4705),a=Object.defineProperty,i=Object.defineProperties,s=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,d=(e,n,r)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,u=(e,n)=>{for(var r in n||(n={}))c.call(n,r)&&d(e,r,n[r]);if(p)for(var r of p(n))l.call(n,r)&&d(e,r,n[r]);return e};const m={sidebar_position:4,hide_table_of_contents:!0},f="Constraints",y={unversionedId:"constraints",id:"constraints",title:"Constraints",description:"TypeScript can do a lot, but sometimes things you care about at runtime shouldn't affect your type.",source:"@site/docs/type/constraints.mdx",sourceDirName:".",slug:"/constraints",permalink:"/type/constraints",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,hide_table_of_contents:!0},sidebar:"sidebar",previous:{title:"Declarations",permalink:"/type/declarations"}},b={},g=[],h={toc:g};function v(e){var n,r=e,{components:a}=r,d=((e,n)=>{var r={};for(var t in e)c.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(null!=e&&p)for(var t of p(e))n.indexOf(t)<0&&l.call(e,t)&&(r[t]=e[t]);return r})(r,["components"]);return(0,t.kt)("wrapper",(n=u(u({},h),d),i(n,s({components:a,mdxType:"MDXLayout"}))),(0,t.kt)("h1",u({},{id:"constraints"}),"Constraints"),(0,t.kt)("p",null,"TypeScript can do a lot, but sometimes things you care about at runtime shouldn't affect your type."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Constraints")," have you covered."),(0,t.kt)(o.g,{embedId:"constraints",mdxType:"StackBlitzDemo"}))}v.isMDXComponent=!0}}]);