"use strict";(self.webpackChunkredo_dev=self.webpackChunkredo_dev||[]).push([[265],{8044:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(9231);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var f=r.createContext({}),c=function(e){var n=r.useContext(f),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(f.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,f=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,y=u["".concat(f,".").concat(d)]||u[d]||l[d]||a;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var f in n)hasOwnProperty.call(n,f)&&(s[f]=n[f]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>D,contentTitle:()=>d,default:()=>m,frontMatter:()=>u,metadata:()=>y,toc:()=>g});var r=t(8044),o=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,f=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,p=(e,n,t)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,l=(e,n)=>{for(var t in n||(n={}))f.call(n,t)&&p(e,t,n[t]);if(s)for(var t of s(n))c.call(n,t)&&p(e,t,n[t]);return e};const u={},d="Root",y={unversionedId:"api/Root",id:"api/Root",title:"Root",description:"tags",source:"@site/docs/model/api/Root.md",sourceDirName:"api",slug:"/api/Root",permalink:"/model/next/api/Root",draft:!1,tags:[],version:"current",frontMatter:{}},D={},g=[{value:"tags",id:"tags",level:2},{value:"text",id:"text",level:2}],b={toc:g};function m(e){var n,t=e,{components:o}=t,p=((e,n)=>{var t={};for(var r in e)f.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&s)for(var r of s(e))n.indexOf(r)<0&&c.call(e,r)&&(t[r]=e[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(n=l(l({},b),p),a(n,i({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("h1",l({},{id:"root"}),"Root"),(0,r.kt)("h2",l({},{id:"tags"}),"tags"),(0,r.kt)("pre",null,(0,r.kt)("code",l({parentName:"pre"},{className:"language-ts"}),"undefined\n")),(0,r.kt)("h2",l({},{id:"text"}),"text"),(0,r.kt)("pre",null,(0,r.kt)("code",l({parentName:"pre"},{className:"language-ts"}),'export declare namespace Root {\n    export type Validate<Def, Dict> = Def extends []\n        ? Def\n        : Def extends string\n        ? Str.Validate<Def, Dict, Def>\n        : Def extends BadDefinitionType\n        ? BadDefinitionTypeMessage<Def>\n        : Def extends Obj.Leaves\n        ? Def\n        : Def extends object\n        ? Obj.Validate<Def, Dict>\n        : Def extends Literal.Definition\n        ? Def\n        : Base.Parsing.ParseErrorMessage<Base.Parsing.UnknownTypeErrorMessage>\n    export type Parse<Def, Dict, Seen> = IsAnyOrUnknown<Def> extends true\n        ? Def\n        : Def extends string\n        ? Def extends Base.Parsing.ParseErrorMessage\n            ? unknown\n            : Str.Parse<Def, Dict, Seen>\n        : Def extends BadDefinitionType\n        ? unknown\n        : Def extends object\n        ? Obj.Parse<Def, Dict, Seen>\n        : Def extends Literal.Definition\n        ? Def\n        : IsAny<Dict> extends true\n        ? any\n        : unknown\n    export type References<Def, Filter> = Def extends string\n        ? Def extends Base.Parsing.ParseErrorMessage\n            ? unknown\n            : Str.References<Def, Filter>\n        : Def extends object\n        ? Obj.References<Def, Filter>\n        : Def extends Literal.Definition\n        ? Base.FilterToTuple<Def, Filter>\n        : []\n    export type BadDefinitionType = Function | symbol\n    type BadDefinitionTypeMessage<Def extends BadDefinitionType> =\n        Base.Parsing.ParseErrorMessage<`Values of type ${Def extends Function\n            ? "function"\n            : "symbol"} are not valid definitions.`>\n    export const parse: Base.Parsing.Parser<unknown>\n    export {}\n}\n')))}m.isMDXComponent=!0}}]);